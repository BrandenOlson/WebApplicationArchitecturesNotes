Module 4: The Ruby Programming Langauge
=======================================

Just enough of an intro to understand Rails apps
Background
Classes and Inheritance
Objects and Variables
Strings, RegEx, Symbols
Expressions, Control Structures
Collections, Blocks, and Iterators

Lecture 1 : Background
======================

Rails was built using the Ruby PL
Ruby code shows up in models, views, and controllers

History: Yukihiro Matsumoto (Matz) created Ruby in mid 90's
	* Scripting lang more powerful than Perl,
		more OO than Python
	* Focus on the programmer, rather than the machine
	* Maximize programmer proficiency
	* Ruby is designed to make programmers happy
	* Principle of Least Astonishment: language should behave to 
	   minimize confusion of experienced programmers
	* Object-oriented interpreted scripting language: intuitive, 
	   flexible, and extensible
	* www.ruby-lang.org, among other tutorials and references
	
Ruby gems is a package management system. gem list
Rails is a Ruby g

The Ruby Interpreter
	ruby -e ' code goes here '
	-e prompt tells the interpreter to execute the line of Ruby code 
	  contained in single quotes.
	Semicolons can be used to separate lines
	Typically you will place your Ruby code in a file, with a .rb 
		extension. 
		E.g., put the previous code in the rile hello.rb, and tell the 
			interpreter to execute it using
			ruby hello.rb

IRB : Interactive Ruby Shell
	* Allows you to execute Ruby code from command prompt:
	* REPL: Read, Execute, Print, Loop
	* Very useful for debugging
	* Type: irb

Can invoke IRB from root of a Rails app directory via rails console
	* Rails environment is loaded when you do this
	* Can directly manipulate Rails app from the command line
	* Very useful and common way to debug
	
Language Features
	* Multi-paradigm programming language
		- Scripting : Can be used to write scripts that automate the 
		    execution of tasks within some environment
		- Imperative (procedure-oriented) : Traditional control 
		    structures exist within
		- Object-oriented : Everything in Ruby is an object, derived 
		    from Object class
		- Functional programming : Computation proceeds via the eval of 
		    functions that depend only on their input, not the program state

Lecture 2 : Classes and Inheritance
===================================

Classes are defined using keyword class, name must begin with capital,
	and CamelCase is the convention
	
	No type information
	Cannot access instance variables
	
Methods
	* Notice that there is no return value specified in the methods above
	* Implicit return values : The value of the last expression executed in a method
	* The return statement still exists if desired
	* When invoking a method, parentheses are optional
	
Class methods
	* Class methods are created in the same way as normal methods, except prefixed with keyword self
		- class MyClass
			def self.cls_method
				"MyClass type"
			end
		  end
	* MyClass.cls_method # => "MyClass type"
	
Methods
	* Last character of a method name is often used to indicate its behavior
		- Ends with ? => return value is boolean
		- Endw with ! => method changes the state of the object
			* Usually a !-version and a non-!-version
		- keyword self can be us3ed inside an object's methods to refer to the current object
		
Inheritance, Mixins, and Extending Classes
	* Only single inheritance is supported
	* Mixin capability associated w/ modules gives you multiple inheritance
	* Classes are never closed - you can always add methods to an existing classes
		- Built-in and self-written
		- class Fixnum
		    def previous

Specifying Access
	* public / private /protected
	* Different than in C++ and Java
		- public : no access control, can be called by anyone
		- protected : can be invoked only by objects of the defining class and subclasses
		- private : can only be called in context of current object, w/out an object reference on the LHS
			* receiver of a private method is always self
	* By default, every method in class is public, every instance variable is protected
	
Accessors
	class MyClass
		attr_accessor :boo
	end
	* Can also just use attr_reader, attr_writer
	
Inheritance
	Syntax is class NewClass < SuperClass
	
	Initialize method is always private, used to create constructer that is invoked by calling new on a class name
	Can create module with its own namespace with keyword module
		* Include a number of classes within it
	Can include a module within another program with keyword require:
		- require 'module_name'
	Within a class, keyword include to mixin a module
		* Makes all methods defined in that module a part of the class that includes the module

Lecture 3 : Objects and Variables
=================================

Everything is an object. Object class is parent class.
	Its methods are available to all objects
Syntax is sensitive to capitalization.

Variables: No variable declarations (types). An appropriate variable is created for your literal	

All assignments are done by reference in Ruby. (Different than C++)
Ruby supports parallel assignment

Simple naming conventions to denote scope of variables
	name - local variable
	@name - instance variable / field
	@@name - class variable
	$Name - global variable (typically capitalized)
	
	@ and $ sigils enhance readability b/c the programmer can easily identify the roles of each var
	
	Local variables must begin with lowercase letter
		Use underscores, not CamelCase
		
	Constants: any name that starts with an uppercase letter
		* Classes and modules are treated as constants
		* Begin w/ uppercase, camelCase

Lecture 4 : Strings, Regex, Symbols
===================================

Strings are created using single or double quotes
Double quoted strings: 
	"360 degrees = #{2*Math::PI} radians"
	* String interpolation
	
Single backquotes : string will be executed as a command in underlying OS
	* `date`
	
Strings are mutable
	String class contains a number of methods used to manipulate strings
		* name.length
		* name[6]
		* name[6..14]
		* name.encoding <Encoding:UTF-8>
		
Regular expression class : Regexp
	* Provides concise, flexible means for matching strings of text
	* /pattern/modifiers
		- "pattern" is regex itself
		- "modifiers" are series of characters indicating various options
		- Syntax is borrowed from Perl (same as most langs)
	* To test: Use the =~ operator
		- Returns the char position of start of match, or nil if no match
	* Ruby documentation explains them
	* Commonly used to validate emails, phone numbers, user input
	
	Ex: email
		/\A[\w\._%-]+@[\w\.-]+\.[a-zA-Z]{2,4}\z/

Symbols
	* Closely related to strings
	* Nonmutable
	* Ruby interpreter maintains a symbol table where it stores the names of all classes, methods, and variables
	* Can add your own symbols to this table. 
		Ex: attr_reader :row, :col
	* Represent names and strings, exist in memory only once during a Ruby session
	* Big space advantage
	
Using a string vs symbol
	* If the contents of the object are important (need to manipulate), use string
	* If the identity is important, (no desire to manipulate), use symbol
	










