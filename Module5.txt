Module 5 : Middleware
---------------------

What is middleware?
HTTP - Introduction
HTTP - Request
HTTP - Response
Model-View-Controller Design Pattern
Rails Controllers - Request Handling
Rails Controllers - Response
MVC Implementation in Rails
Blog App - Iteration 4

Lecture 1 : What is Middleware?
===============================

The "meat" of a web app
Middleware is the "software glue" between the OS and applications on 
	each side of a client-server architecture
	* Provides service to apps not available from the underlying OS
	* Allows multiple processes running on different machines to 
		interact
	* We won't dig too deeply, but we'll focus on how MVC is implemented 
		on top of it
	
In Rails, middleware stack, called Rack, is automatically provided.
	Rack provides unified, simple interface that allows apps to talk to 
		web servers
		* Mongrel, Thin, Phusion, Apache
		* Handles HTTP requests and responses
		* Used to group and organise modules, written in Ruby, specify 
			dependencies between them
		
Other Ruby frameworks, e.g. Sinatra, are also built on top of Rack
rails server
	* a Rack::Server object is created and attached to the web server, 
		middleware components are loaded
	* Rack::Server#start method starts the web server, listens for HTTP 
		requests

Lecture 2 : HTTP Introduction
=============================

HTTP is the foundation for data comm on the Web
Involves request/response interactions

HTTP is an application layer protocol used to deliver resources in 
	distributed hypermedia info systems
	* Initiates activities inplemented over the middleware
	* Response typically returns resources to the browser
	* Vital to understand for building and debugging web apps
	
HTTP - Resources
Resources delivered typically include HTML, CSS, hypermedia, and scripts
	Hypertext - text displayed on a computer (or other device) 
		containing references to other hypertext
		* User can immediately access, usually via mouse click
	Hypermedia - Logical extension of hypertext to graphics/audio/video
	Hyperlinks - Define a structure over the Web
		* Google exploits this structure when determining relevance
	Scripts - Code that can be executed on the client side 
		* Typically JavaScript
		* Led to a lot of security exploits
		
HTTP - Background
	HTTP protocol is extremely lightweight and simple - hence its 
		success
	With HTTP/0.9 (first protocol) you could only issue GET request, 
		i.e., asking server for a resource
		* The server could only return HTML
	Ex: GET /welcome.html
		* Hopefully the server returns contents of requested file, your 
			browser would render it
	HTTP/1.0 extended it to include request headers along with 
		additional request methods (DELETE, POST, etc.)
	HTTP/1.1 - Faster response, allowed multiple transactions over 
		single, persistent connection
		* Faster response and bandwidth savings via cache support
		* Faster for dynamically-generated content
		* Efficient use of IP addresses
		* Support for proxies
		
HTTP - Basics
	Always been a stateless protocol : Does not require server to retain 
		info between client requests
	Each client request is executed independently, w/o knowledge of prev 
		requests
	Hard for web apps to respond intelligently to user input
		- i.e., to create interactivity
	Cookies, sessions, URL encoded parameters and a few other 
		technologies have been introduced to address this issue
		* Allowed for emergence of Web 2.0 and 3.0 apps
		
HTTP Sessions
	HTTP client (browser) establishes TCP connection to a port on a host 
		server (typically port 80), and initiates request
		* May first involve using a DNS server in order to obtain an IP 
			address
			- Translates URL to particular IP address
		* HTTP server listening on port waits for request message
		* Processes request, sends back status line ("HTTP/1.1 200 OK"), 
			along with a response
			- response could be requested resource, error message, or 
				other info
		
Lecture 3 : HTTP Requests
=========================
Client side consists of 3 parts: Request line, header, message body

Request line identifies the resource along with desired action that 
	should be applied to it
	The resource is typically identified by a Universal resource 
		Identifier (URI)
	Note : A Uniform Resource Locator is a specific type of URL
		HEAD : response the resource would supply to GET request, but 
			without response body
		GET : return representation of resource
		POST : submit data to resource, where data is supplied in body 
			of request
			Either creates or updates a resource
		PUT : submit representation of resource
		DELETE
		TRACE, OPTIONS, CONNECT, PATCH
	
	HEAD, GET, OPTIONS, TRACE are safe methods : No side effects on 
		server
		* Information retrieval
		* Should not change state
		* If GET is safely implemented, can make arbitrary GET requests 
			without worry
			- Can cache request and save a lot of computation
		
	POST, PUT, DELETE may cause side effects on server - considered not 
		safe
		However, PUT and DELETE methods should be idempotent
			- Multiple identical requests should have the same effect as 
				a single request
			- Safe methods are also idempotent
		
Headers : Primary part of HTTP request
	Contains parameters of request
	Header fields start with field name, colon, then field value
		Ex: 
			Accept: text/plain
		eX: languages acceptable to client
			Accept-Language: en-US
	Field names and values may be any app-specific strings
	Core set of fields is standardized by Internet Engineering Task 
		Force (IETF)
	HTTP message header must be separated from message body by blank 
		line
	
Message body is optional
	Typically includes user-entered data/ files being uploaded to server
	D3efines various characteristics of data
	May contain number of fields
	Usually header liens in message that describe body
	
	Ex: Content-Type: specifies the MIME-type of the data in message 
		body
	Ex: Content-Length : specifies # bytes

Lecture 4 : HTTP - Response
===========================

Response message is similar to request message.
	* Response line, header, message body
	* After delivering response, server closes connection (0.9 and 1.0)
	* With HTTP 1.1, a persistent connection is assumed by default
	
Response line : First line of resposne provided by serveer (status line)
	* Status line has
		- HTTP version
		- Response status code
		- English reason phrase describing status code
		
Status codes belong to five categorites
	* 1xx - Provisional response
		* Requires the requestor to take additional action to continue
			- 100, continue status code: requester should cont with the 
				requeset
			- 101 : Switching protocol status code (e.g., to HTTPS)
	* 2xx - Successful
	* 3xx - Redirected
		* Further action is needed to fulfill request
	* 4xx - Request Error : There was probably an error in requset, 
		server could not process it
	* 5xx - Server Error : server had internal error when trying to 
		process request
	* Complete list can be found in RFC 2616, official HTTP 1.1 spec
	
Header
	Header fields in response allow server to relay additional info 
		about response
		Same format as in request
		Ex: Accept-Ranges, Age, Proxy-Authenticate
		
Message Body
	Message body must also be preceded by blank line
	Response to HEAD request does not include body, all other responses 
		do
		Could be zero length
	Actual HTML is included
	
HTTPS - HTTP Secure protocol
	* Combo of HTTP and SSL/TLS protocols
	* Makes use of public key infrastructure
	* HTTPS enhances HTTP by providing encrypted communication and 
		secure web server identification
	* Often used for processing payments in web apps, or handling 
		sensitive transactions
	* Trust is based on major certificate authorities
		- e.g., VeriSign/Microsoft/etc.
		- Tells browser whom it should trust
	* URLs begin with "https://" and use 443 by default
	
Lecture 5 : MVC Design Pattern
==============================

Early web apps did not have much organization on server side
	* Static web pages
	* No separation of data from presentation
	* Server-side scripts became more complicated, apps were hard to 
		maintain
	
MVC architectural design pattern
	* Implemented over middleware
	* Used in many web app frameworks
	* Decouples data (model) and presentation (view)
	* Controller handles requests, coordinates between model and view
	* More robust apps, easier to maintain
	
MVC pattern is a collection of design patterns
	* Model: Domain-specific represntation of data over which app 
		operaes
		- Domain logic adds "meaning" to raw data
		- A database often stores data
	* View: Renders the model in a view suitable for interaction
		- Via user interface
		- Multiple views can be created for a single model
	* Controller: Mediates between model and view
	
Different varities of MVC, control flow is generally:
	* User interacts with interface (pressing a button, etc.)
	* Controller handles input event from user interface
		- Registered handler, callback
		- Converts event into appropriate user action, understandable 
			for model
	* Controlelr notifies model of action
		- Possibly resulting in change of state, e.g. updating account 
			info
	* View queries model to generate appropriate user interface
		- Gets its own data from model
		- In some implementations, controller issues an instruction to 
			view to render itself
			i.e., View is automatically notified by model of changes in 
				state
				* Observer design pattern
	* User interface waits for further user interactions, repeat
	
Lecture 6 : Rails Controllers -- Request Handling
=================================================

Models are supported by Ruby ActiveRecord module in Rails
Views and controllers in Rails are supported by Action Pack:
	* ActionDispatch, ActionController, ActionView
Controllers are heart of Rails app
	* When user connects to Rails app, they ask app to execute a 
		controller action
		- How does Rails know what to do?
		
Dispatcher
	When HTTP request is made to Rails app, ActionDispatch module maps 
		that request to particular controllera ction
	Requests are mapped to controller actions via the routes defined in 
		./config/routes.rb
	To connect a request to a controller action, you add a route to 
		./config/routes.rb
	
	Ex: Adding the following to ./config/routes.rb:
		get 'products/:id' => 'catalog#view'
			* Create a route that takes get request issued for products 
				with particular id, and maps it to a catalog controller 
					with view method
			* Will map a GET request that uses the URL 
				http://localhost:3000/products/10 to view method in 
					CatalogController class, assigns the value 10 to 
						params[:id] hash available to all methods in the 
							class
			
RESTful Controllers
	By default, Rails controllers are RESTful -- and therefore use 
		resource routing
	REST stands for Representational State Transfer
	REST : clients should communicate w/ servers through stateless 
		connections
		* Long term state is kept on the server side by maintaining a 
			set of resources
			- posts and comments in our case
		* Client can access these (CRUD) through highly limited but 
			uniform interface
			- set of URLs in our case
		* Computation proceeds by identifying resource and the CRUD op 
			to perform
		
	REST-based web app can contrast with RPC-basaed web app
	In RPC apps, clients send requests to servwers asking for a 
		procedure w/ supplied params
		* Server must advertise the services it offers
		* SOAP is a protocol from Microsoft that supports this
	REST assumes a simple set of verbs (controller actions/methods) that 
		can operate over a rich set of nouns (resources)
	RPC allows for arbitrary complexity on serer side
	
	REST imposes constraints that make web apps easy to maintain
	Programmable Web treates WWW as vast collection of addressable 
		resources
		* Greatly facilitated by REST
	
Resourceful Routes
	The statement in ./config/routes.rb says resources :posts
		* Produces seven different routes in your app, all mapping to 
			methods in PostsController class
		* rake routes shows them for you

Lecture 7 : Rails Controllers - Response
----------------------------------------

Dispatcher routes a request to particular controller action(method)
HTTP GET request http://localhost:3000/posts/1 will route to show method 
	in PostsController class passing params[:id] w/ value 1 to 
		controller
	The show method will use ActiveRecord#find method to retrieve post 
		with id=1 from DB, and assign it to @post
	Finally, controller will pass @post to view in 
		views/posts/show.html.erb, creates HTML for browser
	
Filters
	PostsController#show method is defined as follows:
		def show
		end
	desired post is actually retrieved from DB using filter called 
		set_post
	Filters allow controllers to run shared pre- and post-processing 
		code over their methods
	in posts_controller.rb, we see the line
		before_action :set_post, only: [:show, :edit, :update, :destroy]
	private 
			def set_post
				@post = Post.find(params[:id])
			end

Sessions
	State should be persistent in DB
	Posts and comments are persisted in DB
	When a user connects to Rails app, a session is created
		Ex: session[:current_user] = user.id
			* Hash structure that persists across requests
			* Can be accessed by controllers
	Flash hash is part of session cleared w/ each request
		Ex: flash[:notice] = 'Post was successfully created.'
	
Response - Rendering HTML or JSON
	The request http://localhost:3000/posts/1 assumes HTML will be 
		returned
	Could have also typed http://localhost:3000/posts/1.html
	Rails can also return other formats, such as JSON

Redirects
	Rails may also respond to HTTP request using redirect_to method
	Tells browser to send new request for different URL
		Ex: redirect_to 'www.example.com'
	Rails has shortcuts for URLs w/in your app
		Ex: redirect_to posts_url will redirect to index method in 
			PostsController
		Ex: You can assign flash message as part of redirect:
			- redirect_to @post, notice: 'Post was successfully 
				created.'

In rails console
	app.posts_url
	app.posts_path
	
Lecture 8 : MVC Implementation in Rails
=======================================

Model: ActiveRecord class implements object-relational mappings
View: views and controllers are bundled in Action Pack
Controller: ActionController class is core of web request in Rails
	

MVC interactions in Rails
	1) Browser sends an http request to web server (link clicked)
		* HTTP GET request
		* http://localhost:3000/posts
	2) Web server processes request, determines relevant route, 
		dispatches request to corresponding controller method
		* resources :posts // Linked to index method in posts controller
		* PostController::index
	3) Controller asks model for all info needed to complete request
		* Wants all posts => @posts = Post.all
	4) Model collects requests info and returns it to controller
		* Post array
	5) Controller gives appropriate info to view, requesting particular 
		format
		* HTML by default
		* @posts
	6) View renders information in specified format
		* index.html.erb to controller
	7) Controller assembles total page's html and gives it to web server
		* application.html.erb + index.html to web server
	8) Web server returns page to browser
		* text/html (response) to browser
